1. What is a hash table?
  An array of 2 element arrays, each containing a key and then a value associated with it.

2. What is hashing?
  The process of generating a hash code from a unique key using a hashing function.

3. How does a hash table store data?
  See number 1.  Also, each key associats to a particular index in the array based on the
  hash code and the subsequent mod operation

4. How are hash tables and objects different?
  Hashes store key/value pairs in a particular order because
  you implement them as an array.  You can therefore iterate
  through hashes easily.  You need to iterate through objects manually.


5. Determine whether you would use a hash table or an object to store each of the following pieces of data:
-A list of pets and their unique names. ---> hash table
-The name, age, and the birthday of your best friend. ---> object
-The name and location of every company in a given city. ---> hash table
-All of the books checked out from a library by a particular individual. ---> hash table
-The primary and secondary phone numbers for a contact. --->object


6. Build a system that allows a sales associate to enter a customer's name, address,
and phone number into the system and look up customers using their phone numbers.
Store this information in a hash table.


class Customer{
  constructor(name, address, phone){
    this.key = phone;
    this.value = {phone: phone, name: name, address: address};
  }
}

class CustomerList{
  constructor(size){
    this.value = new Array(size);
    this.size = size;
    this.addCustomer = this.addCustomer.bind(this);
    this.findHashCode = this.findHashCode.bind(this);
    this.findIndexAdd = this.findIndexAdd.bind(this);
    this.linearProbeAdd = this.linearProbeAdd.bind(this);
    this.findCustomer = this.findCustomer.bind(this);
    this.findIndexSearch = this.findIndexSearch.bind(this);
    this.linearProbeSearch = this.linearProbeSearch.bind(this);
  }


  addCustomer(name, address, phone){
    var list = this.value;
    const customer = new Customer(name, address, phone);
    const customerKey = customer.key;
    const hashCode = this.findHashCode(customerKey);
    const index = this.findIndexAdd(hashCode);
    list[index] = customer;
  }

  findCustomer(phone){
    const hashCode = this.findHashCode(phone);
    const index = this.findIndexSearch(hashCode, phone);
    if (index === null){
      console.log("This customer does not exist in the database.");
    } else{
      return this.value[index].value;
    }
  }

  findHashCode(key){
    const hashCode = key;
    return hashCode;
  }


  findIndexAdd(hashCode){
    const size = this.size;
    var list = this.value;
    var index = hashCode % size;
    if (!list[index]){
      return index;
    } else {
      index++;
      return this.linearProbeAdd(index);
      }
    }

  linearProbeAdd(index){
    var list = this.value;
    const size = this.size;
    while(list[index]){
      index++;
    }
    if (index < size) {
      return index;
    }
    index = 0;
    while(list[index]){
      index++;
    }
    return index;
  }


  findIndexSearch(hashCode, key){
    const size = this.size;
    var list = this.value;
    var index = hashCode % size;
    if (!list[index]){
      return null;
    } else if (list[index].key === key){
      return index;
    } else {
      const startIndex = index;
      index++;
      return this.linearProbeSearch(index, key, startIndex);
      }
    }

  linearProbeSearch(index, key, startIndex){
    var list = this.value;
    const size = this.size;
    while(list[index]){
      if (list[index].key === key){
        return index;
      }
      index++;
    }
    index = 0;
    while(list[index]){
      if (list[index].key === key){
        return index;
      } else if (index === startIndex){
        return null;
      }
      index++;
    }
    return null;
  }


}


var list = new CustomerList(11);
list.addCustomer("Ben", "123 lane", 3048737777);
list.addCustomer("Brian", "124 lane", 7849843333);
list.findCustomer(9);











The following uses Map() function in JS...Grader, please skip
*******************************************************
Pseudocode:

FUNCTION Customer(phone, name, address)
  INIT this.key to phone
  INIT this.value to {"name": name, "address": address}
END FUNCTION


JavaScript Implementation:

function Customer(phone, name, address){
  this.key = phone;
  this.value = {name: name, address: address};
}

var customerMap = new Map();

function addCustomer(phone, name, address){
  const customer = new Customer(phone, name, address);
  customerMap.set(customer.key, customer.value);
}

function retrieveCustomer(phone){
  const customerValue = customerMap.get(phone);
  return [phone, customerValue];
}

addCustomer(555, "Bill", "123 Lane");
addCustomer(545, "Stacy", "125 Lane");
addCustomer(535, "Carmine", "128 Lane");
addCustomer(515, "Troy", "130 Lane");
customerMap;
const retrievedCustomer = retrieveCustomer(535);
****************************************************************








7.Build a system that allows a store owner to track their store's inventory using a
hash table for storage.





class Product{
  constructor(name, price, id){
    this.key = id;
    this.value = {id: id, name: name, price: price};
  }
}

class Inventory{
  constructor(size){
    this.value = new Array(size);
    this.size = size;


    this.addProduct = this.addProduct.bind(this);
    this.findHashCode = this.findHashCode.bind(this);
    this.findIndexAdd = this.findIndexAdd.bind(this);
    this.linearProbeAdd = this.linearProbeAdd.bind(this);
    this.findProduct = this.findProduct.bind(this);
    this.findIndexSearch = this.findIndexSearch.bind(this);
    this.linearProbeSearch = this.linearProbeSearch.bind(this);
  }


  addProduct(name, price, id){
    var list = this.value;
    const product = new Product(name, price, id);
    const productKey = product.key;
    const hashCode = this.findHashCode(productKey);
    const index = this.findIndexAdd(hashCode);
    list[index] = product;
  }

  findProduct(id){
    const hashCode = this.findHashCode(id);
    const index = this.findIndexSearch(hashCode, id);
    var list = this.value;
    if (index === null){
      console.log("No such product in inventory.");
      return null;
    } else {
      return list[index].value;
    }
  }

  findHashCode(key){
    const hashCode = key;
    return hashCode;
  }


  findIndexAdd(hashCode){
    const size = this.size;
    var list = this.value;
    var index = hashCode % size;
    if (!list[index]){
      return index;
    } else {
      index++;
      return this.linearProbeAdd(index);
      }
    }

  linearProbeAdd(index){
    var list = this.value;
    const size = this.size;
    while(list[index]){
      index++;
    }
    if (index < size) {
      return index;
    }
    index = 0;
    while(list[index]){
      index++;
    }
    return index;
  }


  findIndexSearch(hashCode, key){
    const size = this.size;
    var list = this.value;
    var index = hashCode % size;
    if (!list[index]){
      return null;
    } else if (list[index].key === key){
      return index;
    } else {
      const startIndex = index;
      index++;
      return this.linearProbeSearch(index, key, startIndex);
      }
    }

  linearProbeSearch(index, key, startIndex){
    var list = this.value;
    const size = this.size;
    while(list[index]){
      if (list[index].key === key){
        return index;
      }
      index++;
    }
    index = 0;
    while(list[index]){
      if (list[index].key === key){
        return index;
      } else if (index === startIndex){
        return null;
      }
      index++;
    }
    return null;
  }


}


var list = new Inventory(11);
list.addProduct("GI Joe", 7.99, 304);
list.addProduct("Brian", 9.99, 974);
list.findProduct(974);
















Uses Map() function....grader, please skip this...
********************************************************************
function Product(id, name, price){
  this.key = id;
  this.value = {name: name, price: price};
}

function Inventory(){
  this.map = new Map();
}

Inventory.prototype.addProduct = function(id, name, price){
  const product = new Product(id, name, price);
  var map = this.map;
  map.set(product.key, product.value);
  return map;
}

Inventory.prototype.retrieveProduct = function(id){
  return [id, this.map.get(id)];
}

var inventory = new Inventory()
inventory.addProduct("r4", "GI Joe", 9.99)
inventory.addProduct("h1", "Barbie", 7.99)
inventory.addProduct("p3", "GI Joe", 9.99)
inventory.addProduct("vb9", "Santa", 8.99)
const retrievedProduct = inventory.retrieveProduct("r4");
*****************************************************************






8. Build a system that allows digital copies of newspapers to be entered and searched
by publisher and publication date. Use hash tables to store the necessary data.




class Issue{
  constructor(publisher, orderBy, article, publicationDate){
    if (orderBy === "publisher"){
      this.key = publisher;
      this.value = {orderBy: orderBy, article: article, publisher: publisher, publicationDate: publicationDate};
    } else if (orderBy === "publication date"){
      this.key = publicationDate;
      this.value = {orderBy: orderBy, article: article, publisher: publisher, publicationDate: publicationDate};
    }
  }
}


class IssueList{
  constructor(size, orderBy){
    this.value = new Array(size);
    this.size = size;
    this.orderBy = orderBy;

    this.addIssue = this.addIssue.bind(this);
    this.findHashCode = this.findHashCode.bind(this);
    this.findIndexAdd = this.findIndexAdd.bind(this);
    this.linearProbeAdd = this.linearProbeAdd.bind(this);
    this.findIssue = this.findIssue.bind(this);
    this.findIndexSearch = this.findIndexSearch.bind(this);
    this.linearProbeSearch = this.linearProbeSearch.bind(this);
  }


  addIssue(publisher, article, publicationDate){
    var list = this.value;
    const orderBy = this.orderBy;
    const issue = new Issue(publisher, orderBy, article, publicationDate);
    const issueKey = issue.key;
    const hashCode = this.findHashCode(issueKey);
    console.log(hashCode);
    const index = this.findIndexAdd(hashCode);
    list[index] = issue;
  }


  findHashCode(key){
    const orderBy = this.orderBy;
    var hashCode = 0;
    if (orderBy === "publisher"){
      const publisher = key;
      const maxLength = 30;
      var publisherPrepared = publisher;
      for (let index = publisherPrepared.length; index < maxLength; index++){
        publisherPrepared+=" ";
      }

      for (let index = 0; index < publisherPrepared.length; index++){
        hashCode += (index+1)*publisherPrepared.charCodeAt(index);
      }

    } else if (orderBy === "publication date"){
      var publicationDate = key;
      hashCode = parseInt(publicationDate);

    }
    return hashCode;
  }


  findIndexAdd(hashCode){
    const size = this.size;
    var list = this.value;
    var index = hashCode % size;
    if (!list[index]){
      return index;
    } else {
      index++;
      return this.linearProbeAdd(index);
      }
    }

  linearProbeAdd(index){
    var list = this.value;
    const size = this.size;
    while(list[index]){
      index++;
    }
    if (index < size) {
      return index;
    }
    index = 0;
    while(list[index]){
      index++;
    }
    return index;
  }

  findIssue(key){
    const hashCode = this.findHashCode(key);
    const index = this.findIndexSearch(hashCode, key);
    var list = this.value;
    if (index === null){
      console.log("No such issue.");
      return null;
    } else{
      return list[index].value;
    }
  }

  findIndexSearch(hashCode, key){
    const size = this.size;
    var list = this.value;
    var index = hashCode % size;
    if (!list[index]){
      return null;
    } else if (list[index].key === key){
      return index;
    } else {
      const startIndex = index;
      index++;
      return this.linearProbeSearch(index, key, startIndex);
      }
    }

  linearProbeSearch(index, key, startIndex){
    var list = this.value;
    const size = this.size;
    while(list[index]){
      if (list[index].key === key){
        return index;
      }
      index++;
    }
    index = 0;
    while(list[index]){
      if (list[index].key === key){
        return index;
      } else if (index === startIndex){
        return null;
      }
      index++;
    }
    return null;
  }


}

var issueList = new IssueList(11, "publisher");
issueList.addIssue("The New York Times", "Hello there you", "20181017");
issueList.findIssue("The New York Times");


























DO NOT GRADE below please...
***************************************************************
searchBy("publisher") OR searchBy("publication date")



var publisher = "The New York Times";
var maxLength = 30;
var publisherPrepared = publisher;
for (let index = publisherPrepared.length; index < maxLength; index++){
  publisherPrepared+=" ";
}

var hashCode=0;
for (let index = 0; index < publisherPrepared.length; index++){
  hashCode += (index+1)*publisherPrepared.charCodeAt(index);
}

hashCode;
//Gives 5 digits






var publicationDate = "19850917";  //YYYYMMDD format
var hashCode = parseInt(publicationDate);
******************************************************************



















Uses Map() function....grader, please skip this...
********************************************************************
function Issue(id, info, publisher, date){
  this.key = id;
  this.value = {info: info, publisher: publisher, date: date};
}

function IssueList(){
  this.database = new Map();
}

IssueList.prototype.addIssue = function(id, info, publisher, date){
  const issue = new Issue(id, info, publisher, date);
  var database = this.database;
  database.set(issue.key, issue.value);
  return database;
}

IssueList.prototype.idFind = function(id){
  return [id, this.database.get(id)];
}

IssueList.prototype.dateFind = function(date){
  var dateIssues = [];
  var database = this.database;
  database.forEach( (value, key) => {
    if (value.date === date){
      dateIssues[dateIssues.length] = [key, value];
    }
  });
  return dateIssues;
}


IssueList.prototype.publisherFind = function(publisher){
  var publisherIssues = [];
  var database = this.database;
  database.forEach( (value, key) => {
    if (value.publisher === publisher){
      publisherIssues[publisherIssues.length] = [key, value];
    }
  });
  return publisherIssues;
}



var issueList = new IssueList();
issueList.addIssue("rh", "Hello my name is Sam", "NY Times", "September 10, 2018");
issueList.addIssue("yu4", "There there, my dear", "Forbes", "August 3, 2018");
issueList.addIssue("roir", "Why I outta", "Wall Street Journal", "September 10, 2018");
issueList.addIssue("poi7", "Galloping Galoshes", "NY Times", "February 19, 2018");
const idFoundList = issueList.idFind("yu4");
const dateFoundList = issueList.dateFind("September 10, 2018");
const publisherFoundList = issueList.publisherFind("NY Times");
****************************************************************************
