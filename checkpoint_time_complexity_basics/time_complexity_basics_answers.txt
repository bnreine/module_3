1. What is time complexity and what is its relation to algorithms?

It is an upper bound function to how much time a procedure (algorithm) takes as a function of input size.

2. What is runtime?

Loosely, same as above.  More rigorously, it's probably the more accurate version, instead of an upper bound.

3. How is the runtime of an algorithm calculated?

Assume all individual line operations represent 1 unit of "time".  Add everything up and you get an algebraic expression
in terms of an input size. Keep the biggest term (in the limit as the input size is infinite) and drop the leading coefficient.

4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most
efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

O(1): constant time
O(log(n)): log time
O(n): linear time
O(nlog(n)): log-linear time
O(n^2): quadratic time
O(n^3): cubic time (added on)
O(2^n): exponential time


5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

Choosing n skittles from a bag one at a time, marking down their color for each one.



6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

O(n): linear time


7. Determine the time complexity of the following snippet of code.


FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

O(n^2): Quadratic time


8. Determine the time complexity of the following snippet of code.
It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

O(2^n): Exponential time

9. Out of the code snippets you just saw, which is the most time efficient?
The linear search is the most time efficient
