
####Memory Questions:
Answer these questions using Markdown in the assignment submission text field.

1. Where, and in what order, does the processor look for a piece of data?

A: 1st: Register, 2nd: Cache, 3rd: Memory(RAM), 4th: Persistance Storage


2. Assuming a total size of 4 Gigabytes and 16-bit memory locations, what number of locations does the RAM provide?

4 billion * 8 bits/(16 bits/location) = 2 billion locations

3. Whatâ€™s the difference between volatile and persistent memory and which types exist in our memory pyramid?

Volatile memory exists only when the computer has power.  There are three main types: Registers, Cache,
and Memeory (Random Access Memory or "RAM"). Register memory is the fastest, then Cache, then RAM.
Persistent memory exists even when powered down. This is hard drive memory.  It is the slowest to access and
manipulate.



Checkpoint Questions:

1. What are some pros and cons of using linked lists instead of arrays?

Pros: Easier to manage space on computer.  Can use larger list.  Never has empty placeholders.
Cons: location of each element not as predictable.  No indexing system, so slower searching than with an array.


2. Come up with a real world example of a linked list.

You can use a linked list to model memorizing a script in acting.  The previous person's dialogue references the
next person and prompts their memory for their chunk of dialogue that comes next.  This continues until the end of
the script. Its only necessary to memorize what comes direclty before you.



Before beginning to code, write out a plan explaining how to solve the question.

The linked list push function should take a value, create a node, and add it to the end of a list.
Below is pseudocode for a push function for a singly linked list. However, there is something wrong
with it. Submit both an explanation of the bug and a functional implementation of the method.


The first thing I'll do is nest the statements so I can understand this better.  The 3rd to the last statement
does not put the new node at the end of the list.  It puts it directly after the head node.  In order to put the
new node at the end, we have to traverse the list to the end and add it there.  To do that, I'll use a while loop to
iterate through the list until the next node is null.  There, I'll append the new node to the next of the very last node.



Pseudocode correction:

FUNCTION push(element)
  CREATE node
  SET node.value TO element
  SET node.next TO null

  IF the head node does not exist THEN
    SET head to node
  ELSE
    SET current to head
    WHILE (current.next)
      SET current to current.next
    END WHILE
    SET current.next to node
  END IF
END FUNCTION


JavaScript Implementation:

class Node {
  constructor(value) {
    this.value = value;
    this.next = null;
  }
}

class LinkedList {
    constructor()
    {
        this.head = null;
        this.size = 0;
        this.push = this.push.bind(this);
    }

    push(element) {
      const node = new Node (element);
      var current;
      if (!this.head) {
        this.head = node;
      } else {
        current = this.head;
        while(current.next) {
          current = current.next;
        }
        current.next = node;
        this.size++;
      }
    }
}




2. Given an unsorted singly linked list, remove all duplicates from the linked list.
Example
Input: a -> c -> d -> d -> a
Output: a -> c -> d

First, traverse list starting from head. Store all entries in an array.  If value already exists, remove node.



JavaScript Implementation:


function Node(element) {
  this.value = element;
  this.next = null;
}

function LinkedList(){
  this.head = null;
  this.size = 0;
}


LinkedList.prototype.push = function(element) {
  const node = new Node (element);
  var current;
  if (!this.head) {
    this.head = node;
    this.size++;
  } else {
    current = this.head;
    while(current.next) {
      current = current.next;
    }
    current.next = node;
    this.size++;
  }
}

LinkedList.prototype.printList = function(){
  let currentNode = this.head;
  let list = [];
  let listSize = 0;
  while(currentNode){
    list[listSize] = currentNode.value;
    listSize++;
    currentNode = currentNode.next;
  }
  console.log(list);
}



LinkedList.prototype.removeDuplicates = function() {
  let uniqueList = [];
  let currentNode = this.head;
  let previousNode = null;
  let tempCurrentNode;
  while(currentNode){
    if (currentNode === this.head){
      uniqueList[0] = currentNode.value;
      currentNode = currentNode.next;
      previousNode = this.head;

    } else if (this.isPresent(currentNode.value, uniqueList)) {
      tempCurrentNode = currentNode.next;
      this.removeNode(currentNode, previousNode);
      currentNode = tempCurrentNode;

    } else if (currentNode.next) {
      uniqueListSize = uniqueList.length;
      uniqueList[uniqueListSize] = currentNode.value;
      currentNode = currentNode.next;
      previousNode = previousNode.next;

    } else {
      uniqueListSize = uniqueList.length;
      uniqueList[uniqueListSize] = currentNode.value;
      currentNode=null;
    }
  }
}


LinkedList.prototype.removeNode = function(currentNode, previousNode){
  previousNode.next = currentNode.next;
  delete currentNode.value;
  delete currentNode.next;
  this.size--;
}


LinkedList.prototype.isPresent = function(value, list) {
  for (let elementIndex = 0; elementIndex < list.length; elementIndex ++) {
    const element = list[elementIndex];
    if (element === value) {
      return true;
    }
  }
  return false;
}


var list = new LinkedList;
list.push(1);
list.push(2);
list.push(3);
list.push(2);
list.push(2);
list.push(4);
list.push(5);
list.push(1);
list.push(1);
list.printList();
list.removeDuplicates();
list.printList();




3. Given an unsorted singly linked list, reverse it.
Example
Input: a -> b -> c -> d
Output: d -> c -> b -> a
